version: "3.3"

networks:
  net:
    driver: overlay
    driver_opts:
      encrypted: "true"
    attachable: true

volumes:
    alertmanager:
      driver: pxd
      driver_opts:
        repl: 2
        size: 2
    alertmanagerB:
      driver: pxd
      driver_opts:
        repl: 2
        size: 2 
    caddycerts:
      driver: pxd
      driver_opts:
        repl: 2
        size: 2
    grafana:
      driver: pxd
      driver_opts:
        repl: 2
        size: 10
    portainer_data:
      driver: pxd
      driver_opts:
        repl: 2
        size: 10
    portainer_certs:
      driver: pxd
      driver_opts:
        repl: 2
        size: 1
    prometheus:
      driver: pxd
      driver_opts:
        repl: 2
        size: 10
    swarm-endpoints:
      driver: pxd
      driver_opts:
        repl: 2
        size: 1
        shared: "true"

configs:
  alertmanager_config:
    file: ./alertmanager/conf/alertmanager.yml

  caddy_config:
    file: ./caddy/Caddyfile
  caddy_www:
    file: ./caddy/index.html
#  caddy_cert:
#    file: ./caddy/caddycerts/cert.pem
#  caddy_key:
#    file: ./caddy/caddycerts/key.pem

  grafana_provisioning_datasources:
    file: ./grafana/datasources/prometheus.yaml
  grafana_provisioning_dashboards:
    file: ./grafana/dashboards.yml
  grafana_dashboard-cluster-nodes:
    file: ./grafana/dashboards/cluster-nodes.json
  grafana_dashboard_prometheus-2-stats:
    file: ./grafana/dashboards/prometheus-2-stats.json
  grafana_dashboard_docker-containers:
    file: ./grafana/dashboards/docker-containers.json
  grafana_dashboard_portworx-cluster-dash:
    file: ./grafana/dashboards/portworx-cluster-dash.json
  grafana_dashboard_portworx-volumes-dash:
    file: ./grafana/dashboards/portworx-volumes-dash.json
  grafana_dashboard_etcd-dash:
    file: ./grafana/dashboards/etcd-dash.json

  prometheus-conf:
    file: ./prometheus/conf/prometheus.yml
  prometheus-container_nodes:
    file: ./prometheus/rules/container_nodes.yml
  prometheus-docker_containers:
    file: ./prometheus/rules/docker_containers.yml
  prometheus-portworx:
    file: ./prometheus/rules/portworx.yml

  unsee-conf:
    file: ./unsee/unsee.yaml

services:

  alertmanager:
    image: prom/alertmanager:v0.15.2
    networks:
      - net
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--cluster.listen-address=0.0.0.0:9094'
      - '--cluster.advertise-address=:9094'
      - '--cluster.peer=alertmanagerB:9094'
    configs:
      - source: alertmanager_config
        target: /etc/alertmanager/alertmanager.yml
    volumes:
      - alertmanager:/alertmanager
    deploy:
      mode: replicated
      replicas: 1
      labels:
        prometheus.enable: "true"
        prometheus.port: "9093"
        prometheus.path: "/metrics"
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  alertmanagerB:
    image: prom/alertmanager:v0.15.2
    networks:
      - net
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--cluster.listen-address=0.0.0.0:9094'
      - '--cluster.advertise-address=:9094'
      - '--cluster.peer=alertmanager:9094'
    configs:
      - source: alertmanager_config
        target: /etc/alertmanager/alertmanager.yml
    volumes:
      - alertmanagerB:/alertmanager
    deploy:
      mode: replicated
      replicas: 1
      labels:
        prometheus.enable: "true"
        prometheus.port: "9093"
        prometheus.path: "/metrics"
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  caddy:
    image: swarmstack/caddy:no-stats
    ports:
      - "80:80"
      - "443:443"
      - "3000:3000"
      - "9000:9000"
      - "9090:9090"
      - "9091:9091"
      - "9093:9093"
      - "9094:9094"
      - "9095:9093"
      - "19998:19999"
    networks:
      - net
    environment:
      - ADMIN_USER=${ADMIN_USER:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - CADDY_CERT=${CADDY_CERT:-self_signed}
      - CADDY_KEY=${CADDY_KEY:-}
      - CADDY_URL=${CADDY_URL:-}
      - CADDYPATH=/etc/caddycerts
      - PUSH_USER=${PUSH_USER:-pushuser}
      - PUSH_PASSWORD=${PUSH_PASSWORD:-pushpass}
      #- http_proxy=http://proxy.example.com:80
      #- https_proxy=https://proxy.example.com:443
      #- no_proxy=10.0.0.0/8,.example.com
    configs:
      - source: caddy_config
        target: /etc/Caddyfile
      - source: caddy_www
        target: /www/index.html
#      - source: caddy_cert
#        target: /caddy/caddycerts/cert.pem
#      - source:  caddy_key
#        target: /caddy/caddycerts/key.pem
    volumes:
      - caddycerts:/etc/caddycerts
    deploy:
      mode: replicated
      replicas: 1
        prometheus.enable: "true"
        prometheus.port: "9180"
        prometheus.path: "/metrics"
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  cadvisor:
    image: google/cadvisor:v0.31.0
    networks:
      - net
    command: -logtostderr -docker_only
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    deploy:
      mode: global
      labels:
        prometheus.enable: "true"
        prometheus.port: "8080"
        prometheus.path: "/metrics"
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  grafana:
    image: grafana/grafana:5.3.2
    networks:
      - net
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      #- GF_PATHS_PROVISIONING=/etc/grafana/provisioning/
      #- GF_SERVER_ROOT_URL=${GF_SERVER_ROOT_URL:-localhost}
      #- GF_SMTP_ENABLED=${GF_SMTP_ENABLED:-false}
      #- GF_SMTP_FROM_ADDRESS=${GF_SMTP_FROM_ADDRESS:-grafana@test.com}
      #- GF_SMTP_FROM_NAME=${GF_SMTP_FROM_NAME:-Grafana}
      #- GF_SMTP_HOST=${GF_SMTP_HOST:-smtp:25}
      #- GF_SMTP_USER=${GF_SMTP_USER}
      #- GF_SMTP_PASSWORD=${GF_SMTP_PASSWORD}
      #- http_proxy=http://proxy.example.com:80
      #- https_proxy=https://proxy.example.com:443
      #- no_proxy=10.0.0.0/8,.example.com
    volumes:
      - grafana:/var/lib/grafana
    configs:
      - source: grafana_dashboard_etcd-dash
        target: /etc/grafana/dashboards/etcd-dash.json
      - source: grafana_dashboard-cluster-nodes
        target: /etc/grafana/dashboards/cluster-nodes.json
      - source: grafana_dashboard_docker-containers
        target: /etc/grafana/dashboards/docker-containers.json
      - source: grafana_dashboard_portworx-cluster-dash
        target: /etc/grafana/dashboards/portworx-cluster-dash.json
      - source: grafana_dashboard_portworx-volumes-dash
        target: /etc/grafana/dashboards/portworx-volumes-dash.json
      - source: grafana_dashboard_prometheus-2-stats
        target: /etc/grafana/dashboards/prometheus-2-stats.json
      - source: grafana_provisioning_dashboards
        target: /etc/grafana/provisioning/dashboards/dashboards.yml
      - source: grafana_provisioning_datasources
        target: /etc/grafana/provisioning/datasources/prometheus.yaml
    deploy:
      mode: replicated
      replicas: 1
      labels:
        prometheus.enable: "true"
        prometheus.port: "3000"
        prometheus.path: "/metrics"
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  portainer:
    image: portainer/portainer:1.19.2
    command: -H tcp://tasks.portainer-agent:9001 --tlsskipverify
    volumes:
      - portainer_data:/data
      - portainer_certs:/certs
    networks:
      - net
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]

  portainer-agent:
    image: portainer/agent:1.1.2
    environment:
      AGENT_CLUSTER_ADDR: tasks.portainer-agent
      # AGENT_PORT: 9001
      LOG_LEVEL: warn
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - net
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]

  prometheus:
    image: prom/prometheus:v2.5.0
    networks:
      - net
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention=24h'
      - '--web.enable-admin-api'
    volumes:
      - prometheus:/prometheus
      - swarm-endpoints:/etc/swarm-endpoints/:ro
    configs:
      - source: prometheus-conf
        target: /etc/prometheus/prometheus.yml
      - source: prometheus-container_nodes
        target: /etc/prometheus/container_nodes.yml
      - source: prometheus-docker_containers
        target: /etc/prometheus/docker_containers.yml
      - source: prometheus-portworx
        target: /etc/prometheus/portworx.yml
    deploy:
      mode: replicated
      replicas: 1
      labels:
        prometheus.enable: "true"
        prometheus.port: "9090"
        prometheus.path: "/metrics"
      resources:
        limits:
          memory: 2048M
        reservations:
          memory: 1024M

  pushgateway:
    image: prom/pushgateway:v0.6.0
    networks:
      - net
    deploy:
      mode: replicated
      replicas: 1
      labels:
        prometheus.enable: "true"
        prometheus.port: "9091"
        prometheus.path: "/metrics"
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

  swarm-discovery-server:
    image: jmendiara/prometheus-swarm-discovery:0.2.0
    networks:
      - net
    command:
      - server
      - -l=warn
    ports:
      - '8080:8080'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
      placement:
        constraints:
          - node.role == manager

  swarm-discovery-client:
    image: jmendiara/prometheus-swarm-discovery:0.2.0
    networks:
      - net
    command:
      - client
      - -i=5
      - -s=http://swarm-discovery-server:8080
      - -o=/swarm-endpoints/swarm-endpoints.json
      - -p=swarmstack_prometheus
      - -l=warn
    volumes:
      - swarm-endpoints:/swarm-endpoints/

  unsee:
    image: cloudflare/unsee:v0.9.2
    configs:
      - source: unsee-conf
        target: /unsee.yaml
    networks:
      - net
    environment:
      - "ALERTMANAGER_URIS=alertmanager:http://alertmanager:9093 alertmanagerB:http://alertmanagerB:9093"
    deploy:
      mode: replicated
      replicas: 1
      labels:
        prometheus.enable: "true"
        prometheus.port: "8080"
        prometheus.path: "/metrics"
